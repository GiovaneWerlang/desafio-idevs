/*
 Escreva um algoritmo que mostre todos os números n menores que 10.000, onde n e n + 1
possuem o mesmo número de divisores. Por exemplo, considere a seguinte sequência de 
números e seus respectivos divisores:

    NÚMERO DIVISORES
    1       1
    2       2, 1
    3       3, 1
    4       4, 2, 1
    5       5, 1
    6       6, 3, 2, 1
    7       7, 1
    8       8, 4, 2, 1
    9       9, 3, 1
    10      10, 5, 2, 1
    11      11, 1
    12      12, 6, 3, 2
    13      13, 1
    14      14, 7, 2, 1
    15      15, 5, 3, 1

Podemos concluir que dessa sequência somente os números 2 e 14 devem aparecer na tela.
 */
package ids.view;

import ids.util.Util;

/**
 *
 * @author Giovane
 */
public class IfrDesafio2 extends javax.swing.JInternalFrame {

    /**
     * Creates new form IfrDesafio2
     */
    public IfrDesafio2() {
        initComponents();
    }
    
    //Método contaDivisor recebe um inteiro, conta o número de divisores e retorna o resultado
    public int contaDivisor(int n){
        //Váriavel contador inicializada com número 1 pois todos os números são divisíveis por 1
        int contador = 1;
        
        //Laço for percorre os números de 2 (todos os números são divisíveis por 1) até n verificando se o resto da divisão de i por n é 0 indicando que i é um divisor de n
        for (int i = 2; i <= n; i++) {
            
            if(n % i == 0){
                
                //O contador é acrescido a cada divisor encontrado
                contador++;
            }
        }
        
        //O contador inteiro é restornado
        return contador;
    }
    
    //Método mostraResultado recebe uma string e instancia um internal frame com scrollpane para visualização do resultado
    public void mostraResultado(String resultado){
        
        IfrResultado ifrResultado= new IfrResultado(resultado);
        super.getDesktopPane().add(ifrResultado);
        //Classe util é utilizada para centralizar o internal frame
        Util.centralizarFrame(ifrResultado);
        ifrResultado.setVisible(true);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btCalcular = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setClosable(true);
        setTitle("Desafio 2");
        setToolTipText("Calculador de n e n+1 com mesma quantidade de divisores.");

        btCalcular.setText("Mostrar");
        btCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCalcularActionPerformed(evt);
            }
        });

        jLabel1.setText("Clique em mostrar para calcular todos os números n menores que 10.000.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(21, 21, 21))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btCalcular, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel1)
                .addGap(28, 28, 28)
                .addComponent(btCalcular)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCalcularActionPerformed
        
        
        //Variável divisores inicializada vazia para armazenar posteriormente os divisores
        String divisores = "";
        
                    
                //Laço for percorre todos os números menores que o valor 10000
                for (int i = 1; i < 10000; i++) {
                    //Testa se a quantidade de divisores de i é igual a i+1 ou seja se n e n+1 tem a mesma quantidade de divisores      

                    if(contaDivisor(i) == contaDivisor(i+1)){
                        //Quando n e n+1 tem a mesma quantidade de divisores i é adicionado a string divisores junto com a quebra de linha
                        divisores += i + "\n";
                    }
                }
                
                //Invoca o método mostra resultados para visualização dos resultados
                mostraResultado(divisores);
                
            
        
    }//GEN-LAST:event_btCalcularActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCalcular;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
